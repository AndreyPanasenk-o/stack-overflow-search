{"version":3,"sources":["api/Questions/index.ts","api/Tags/index.ts","pages/Header/index.tsx","pages/Question/index.tsx","pages/Questions/index.tsx","App.tsx","models/filter/index.ts","reportWebVitals.ts","reducers/index.ts","reducers/Tags/index.ts","reducers/TagName/index.ts","reducers/Filter/index.ts","reducers/SearchResult/index.ts","index.tsx","pages/Questions/style.module.css","pages/Header/style.module.css"],"names":["fetchQuestions","dispatch","getState","filter","parseFilter","url","filterAsString","fetch","then","response","json","data","type","payload","questions","items","result","order","sort","from_date","getTime","to_date","tags","length","join","fetchTags","tagName","map","t","name","connect","state","props","useDispatch","handleTagNameChange","event","target","value","className","classes","header","Autocomplete","multiple","options","getOptionLabel","tag","style","width","onChange","newValue","renderInput","params","TextField","label","variant","useStyles","makeStyles","theme","createStyles","root","margin","backgroundColor","orange","cardHeader","padding","infoIcon","verticalAlign","color","marginLeft","marginRight","display","infoTitle","textAlign","resolveIcon","green","paddingTop","paddingRight","paddingBottom","paddingLeft","borderRadius","marginBottom","avatar","questionText","wordBreak","QuestionComponent","Card","CardHeader","subheader","owner","display_name","title","titleTypographyProps","subheaderTypographyProps","Avatar","aria-label","CardContent","Typography","component","CardActions","titleAccess","answer_count","view_count","is_answered","Chip","searchResult","page","question","question_id","App","FilterOrder","FilterSorting","path","QuestionsComponent","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","desc","activity","has_more","quota_max","quota_remaining","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.49508b8b.chunk.js","sourcesContent":["import { Filter } from \"../../models/filter\";\r\n\r\nconst maxQuestionsToLoad = 25;\r\nexport function fetchQuestions(dispatch: any, getState: any) {\r\n    const filter = getState().filter;\r\n\r\n    parseFilter(filter);\r\n\r\n    let url = 'https://api.stackexchange.com/2.2/questions?site=stackoverflow';\r\n    const filterAsString = parseFilter(filter);\r\n    if (filterAsString) {\r\n        url += filterAsString;\r\n    }\r\n    fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            dispatch({ type: 'QUESTIONS_UPDATED', payload: { ...data, questions: [...data.items] } });\r\n        });\r\n}\r\n\r\nconst parseFilter = (filter: Filter): string => {\r\n    let result = `&order=${filter.order}&sort=${filter.sort}`\r\n    if (filter.from_date)\r\n        result += `&fromdate=${filter.from_date.getTime()}`;\r\n    if (filter.to_date)\r\n        result += `&todate=${filter.to_date.getTime()}`;\r\n    if (filter.tags.length)\r\n        result += `&tagged=${filter.tags.join()}`;\r\n    return result;\r\n}","const maxTagsToLoad = 25;\r\nexport function fetchPopularTags(dispatch: any, getState: any) {\r\n    let url = `https://api.stackexchange.com/2.2/tags?site=stackoverflow&order=desc&sort=popular&max=${maxTagsToLoad}`;\r\n    fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const tags = data.items.map((t: any) => t.name);\r\n            dispatch({ type: 'TAGS_POPULAR_FETCH', payload: tags });\r\n        });\r\n}\r\n\r\nexport function fetchTags(dispatch: any, getState: any) {\r\n    const tagName = getState().tagName;\r\n    let url = `https://api.stackexchange.com/2.2/tags?site=stackoverflow&order=desc&sort=popular&max=${maxTagsToLoad}&inname=${tagName}`;\r\n    fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const tags = data.items.map((t: any) => t.name);\r\n            dispatch({ type: 'TAGS_POPULAR_FETCH', payload: tags });\r\n        });\r\n}","import { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useContext } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { fetchQuestions } from \"../../api/Questions\";\r\nimport { fetchTags } from \"../../api/Tags\";\r\nimport { Filter } from \"../../models/filter\";\r\nimport classes from './style.module.css';\r\n\r\n\r\nconst Header = (props: { tags: string[], filter: Filter }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleTagNameChange = (event: any) => {\r\n        dispatch({ type: 'TAG_NAME_CHANGED', payload: event.target.value })\r\n        dispatch(fetchTags);\r\n    }\r\n\r\n    const handleTagsChanged = (event: any, newValue: string[]) => {\r\n        dispatch({ type: 'TAGS_UPDATED', payload: { ...props.filter, tags: [...newValue] } });\r\n        dispatch(fetchQuestions);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.header}>\r\n            <Autocomplete\r\n                multiple\r\n                options={props.tags}\r\n                getOptionLabel={(tag) => tag}\r\n                style={{ width: 300 }}\r\n                onChange={handleTagsChanged}\r\n                renderInput={(params) => <TextField {...params} onChange={handleTagNameChange} label=\"Tags\" variant=\"outlined\" />}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect((state: { tags: string[], filter: Filter }) => { return { tags: state.tags, filter: state.filter } })(Header);","import { Avatar, Card, CardActions, CardContent, CardHeader, Chip, createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../models/question\";\r\nimport classes from './style.module.css';\r\nimport HelpOutlineOutlinedIcon from '@material-ui/icons/HelpOutlineOutlined';\r\nimport QuestionAnswerOutlinedIcon from '@material-ui/icons/QuestionAnswerOutlined';\r\nimport { green, orange, red } from \"@material-ui/core/colors\";\r\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined';\r\nimport BarChartOutlinedIcon from '@material-ui/icons/BarChartOutlined';\r\nimport DoneRoundedIcon from '@material-ui/icons/DoneRounded';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: 345,\r\n            margin: 24,\r\n            backgroundColor: orange[50]\r\n        },\r\n        cardHeader: {\r\n            padding: 16\r\n        },\r\n        infoIcon: {\r\n            verticalAlign: 'middle',\r\n            color: orange[500],\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            display: 'block'\r\n        },\r\n        infoTitle: {\r\n            width: 78,\r\n            textAlign: 'center'\r\n        },\r\n        resolveIcon: {\r\n            verticalAlign: 'middle',\r\n            color: green[500],\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            display: 'block'\r\n        },\r\n        tags: {\r\n            paddingTop: 8,\r\n            paddingRight: 16,\r\n            paddingBottom: 8,\r\n            paddingLeft: 16\r\n        },\r\n        tag: {\r\n            backgroundColor: orange[200],\r\n            borderRadius: 4,\r\n            marginRight: 8,\r\n            marginBottom: 8\r\n        },\r\n        avatar: {\r\n            backgroundColor: orange[500],\r\n        },\r\n        questionText:{\r\n            wordBreak: 'break-word'\r\n        }\r\n    }),\r\n);\r\nexport const QuestionComponent = (props: Question) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                className={classes.cardHeader}\r\n                subheader={props.owner.display_name}\r\n                title='Author:'\r\n                titleTypographyProps={{ variant: 'caption', color: \"textSecondary\" }}\r\n                subheaderTypographyProps={{ variant: 'h6', color: \"textPrimary\" }}\r\n                avatar={\r\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                        <HelpOutlineOutlinedIcon />\r\n                    </Avatar>\r\n                }\r\n            >\r\n            </CardHeader>\r\n            <CardContent>\r\n                <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\" className={classes.questionText}>\r\n                    {props.title}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n\r\n                <span className={classes.infoTitle}>\r\n                    <QuestionAnswerOutlinedIcon className={classes.infoIcon} titleAccess=\"Answers\">\r\n                    </QuestionAnswerOutlinedIcon>\r\n                    {props.answer_count}\r\n                </span>\r\n                <span className={classes.infoTitle}>\r\n                    <VisibilityOutlinedIcon className={classes.infoIcon} titleAccess=\"Views\">\r\n                    </VisibilityOutlinedIcon>\r\n                    {props.view_count}\r\n                </span>\r\n                <span className={classes.infoTitle}>\r\n                    <BarChartOutlinedIcon className={classes.infoIcon} titleAccess=\"Score\">\r\n                    </BarChartOutlinedIcon>\r\n                    {props.view_count}\r\n                </span>\r\n                {props.is_answered ?\r\n                    <span className={classes.infoTitle}>\r\n                        <DoneRoundedIcon className={classes.resolveIcon} titleAccess=\"Resolved\"></DoneRoundedIcon>\r\n                        Resolved\r\n                    </span>\r\n                    : ''\r\n                }\r\n            </CardActions>\r\n            <div className={classes.tags}>\r\n                {props.tags.map(tag => <Chip className={classes.tag} label={tag} key={tag} />)}\r\n            </div>\r\n        </Card >\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { Question } from '../../models/question';\r\nimport Header from '../Header';\r\nimport { QuestionComponent } from '../Question/index';\r\nimport classes from './style.module.css';\r\nimport { connect } from \"react-redux\";\r\nimport { SearchResult } from '../../models/result';\r\n\r\n\r\nconst QuestionsComponent = (props: { searchResult: SearchResult }) => {\r\n    return (\r\n        <div className={classes.page}>\r\n            <Header></Header>\r\n            <div className={classes.questions}>\r\n                {props.searchResult.questions?.map(question => <QuestionComponent key={question.question_id} {...question} />)}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default connect((state: { searchResult: SearchResult }) => { return { searchResult: state.searchResult } })(QuestionsComponent);\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport QuestionsComponent from './pages/Questions';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/search\" component={QuestionsComponent}></Route>\n                <Route path=\"*\">\n                    <Redirect to=\"/search\" />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","export enum FilterOrder {\r\n    desc = 'desc',\r\n    asc = 'asc'\r\n}\r\n\r\nexport enum FilterSorting {\r\n    activity = 'activity',\r\n    votes = 'votes',\r\n    creation = 'creation',\r\n    hot = \"hot\",\r\n    week = 'week',\r\n    month = 'month'\r\n}\r\n\r\n\r\n\r\nexport type Filter = {\r\n    tags: string[];\r\n    order: FilterOrder;\r\n    sort: FilterSorting;\r\n    from_date?: Date;\r\n    to_date?: Date;\r\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\nimport filterReducer from \"./Filter\";\r\nimport searchResultReducer from \"./SearchResult\";\r\nimport tagNameReducer from \"./TagName\";\r\nimport tagsReducer from \"./Tags\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tags: tagsReducer,\r\n    tagName: tagNameReducer,\r\n    filter: filterReducer,\r\n    searchResult: searchResultReducer\r\n});","export default function tagsReducer(state: string[] = ['ccc'], action: any) {\r\n    switch (action.type) {\r\n        case 'TAGS_FETCH': {\r\n            return action.payload;\r\n        }\r\n        case 'TAGS_POPULAR_FETCH': {\r\n            return action.payload;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","export default function tagNameReducer(state = '', action: any) {\r\n    switch (action.type) {\r\n        case 'TAG_NAME_CHANGED': {\r\n            return action.payload;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import { Filter, FilterOrder, FilterSorting } from \"../../models/filter\";\r\n\r\nexport default function filterReducer(state = {\r\n    tags: [],\r\n    order: FilterOrder.desc,\r\n    sort: FilterSorting.activity\r\n\r\n}, action: { payload: Filter, type: string }) {\r\n    switch (action.type) {\r\n        case 'TAGS_UPDATED': {\r\n            return { ...action.payload, tags: [...action.payload.tags] };\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import { SearchResult } from \"../../models/result\";\r\n\r\nexport default function searchResultReducer(state = {\r\n    questions: [],\r\n    has_more: false,\r\n    quota_max: 0,\r\n    quota_remaining: 0\r\n\r\n}, action: { type: string, payload: SearchResult }) {\r\n    switch (action.type) {\r\n        case 'QUESTIONS_UPDATED': {\r\n            return { ...action.payload, questions: [...action.payload.questions] };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppProvider } from './prooviders/App';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducers';\n\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { fetchPopularTags } from './api/Tags';\n\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\nexport const store = createStore(rootReducer, composedEnhancer);\n\nstore.dispatch(fetchPopularTags);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </ Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"style_page__1tWeC\",\"questions\":\"style_questions__2GVqz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"style_header__2GY-4\"};"],"sourceRoot":""}